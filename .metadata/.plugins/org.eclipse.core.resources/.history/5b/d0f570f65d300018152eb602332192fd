package objects;

import java.util.HashMap;

import exceptions.SkolemnException;
import parser.FOLMatchEnum;

public abstract class FOLElement
{
    public String name;

    public FOLElement(String name)
    {
        this.name = name;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this.getClass() != o.getClass() || !(this.name.equals(((FOLElement) o).name)))
            return false;
        return true;
    }

    public String toString()
    {
        return this.name;
    }

    // TODO: Not done yet, probably doesn't work yet
    public FOLElement substitute(HashMap<FOLElement, FOLElement> subs) throws Exception // TODO:
                                                                                        // Check
    {
        if (this instanceof FOLVariable)
        {
            FOLElement valueInMap = subs.get(this);
            if (valueInMap != null)
            {
                System.out.println("Found variable to replace!");
                if (valueInMap instanceof FOLObject || valueInMap instanceof FOLVariable)
                    return valueInMap;
                else if (valueInMap instanceof FOLFunction)
                {
                    return new FOLFunction(valueInMap.name, ((FOLFunction) valueInMap).prototype, ((FOLFunction) valueInMap).copyArguments());
                }
            }
        }
        else if (this instanceof FOLFunction)
        {
            FOLFunction func = (FOLFunction) this;
            for (int i = 0; i < func.arguments.length; i++)
            {
                if (func.arguments[i] instanceof FOLVariable)
                {
                    func.arguments[i] = func.arguments[i].substitute(subs);

                }
            }
        }
        return this;
    }

    public boolean verifyAskTerm(FOLVariable S) throws SkolemnException
    {
        if (this instanceof FOLVariable)
        {
            if (this.equals(S))
            {
                return true;
            }
            else
            {
                throw new SkolemnException("Invalid variable " + this.toString());
            }
        }
        else
        {

        }

        return false;
    }

    public abstract FOLMatchEnum compareTo(FOLElement e);

    public abstract FOLMatchEnum strictCompareTo(FOLElement e);

}
